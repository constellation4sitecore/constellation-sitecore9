<?xml version="1.0" encoding="utf-8"?>
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/">
	<sitecore>
		<sites>
			<!-- 
			Custom Site Attribute: notFoundPageID
			
			This should be the ID of the Item to use for presenting 404 Response Status messages to the visitor.
			Each site requires its own 404 page Item.
			
			Example Follows:
			
			<site name="website">
				<patch:attribute name="notFoundPageID">{11111111-1111-1111-1111-111111111111}</patch:attribute>
			</site>-->
		</sites>

		<settings>

			<!--  USE SERVER-SIDE REDIRECT FOR REQUEST ERRORS
			
			Overwrite the default value (false) because the Redirect Manager needs to use Server.Transfer instead of Response.Redirect 
			to redirect request to service pages when an error occurs (item not found, access denied etc).
			This will allow the Redirect Manager to set an appropriate response code.
			-->
			<setting name="RequestErrors.UseServerSideRedirect">
				<patch:attribute name="value">true</patch:attribute>
			</setting>
		</settings>

		<pipelines>
			<httpRequestBegin>
				<!--
				PAGE NOT FOUND RESOLVER
				
				Assuming the site is configured with the ID of the "not found page" this processor will resolve the context item
				to that specific item if the context item is currently null. 
				
				This processor must be called after all  Item resolvers, but before any Device and Layout resolvers. The patch:before 
				below is a "safe bet". Your configuration may need to differ.
			
				Please note that the customizations in this processor will only run for databases and sites as configured below, and should intentionally not
				run for Sitecore system sites. The current config specifies which sites are ignored. Your configuration may differ.
				
				-->
				<processor
					type="Constellation.Foundation.PageNotFound.Pipelines.HttpRequest.PageNotFoundResolver, Constellation.Foundation.PageNotFound"
					patch:before="processor[@type='Sitecore.Pipelines.HttpRequest.DeviceSimulatorResolver, Sitecore.Kernel']">
					<databasesToIgnore>core, master</databasesToIgnore>
					<sitesToIgnore>shell,login,admin,service,modules_shell,modules_website,scheduler,system,publisher</sitesToIgnore>
					<pathsToIgnore>/sitecore,/trace,/layouts,/_dev,/_DEV,/api</pathsToIgnore>
				</processor>
			</httpRequestBegin>
			<httpRequestEnd>
				<!--
				SET 404 STATUS CODE
				
				Assuming the site is configured with the ID of the "not found page" this processor will detect that the context item
				is the 404 page and will add the 404 code to the Response.
			
				Please note that the customizations in this processor will only run for databases and sites as configured below, and should intentionally not
				run for Sitecore system sites. (see sitesToIgnore below).
				-->
				<processor
					type="Constellation.Foundation.PageNotFound.Pipelines.HttpRequest.Set404StatusCode, Constellation.Foundation.PageNotFound"
					patch:after="processor[@type='Sitecore.Pipelines.HttpRequest.EndDiagnostics, Sitecore.Kernel']">
					<databasesToIgnore>core, master</databasesToIgnore>
					<sitesToIgnore>shell,login,admin,service,modules_shell,modules_website,scheduler,system,publisher</sitesToIgnore>
					<pathsToIgnore>/sitecore,/trace,/layouts,/_dev,/_DEV,/api</pathsToIgnore>
				</processor>
			</httpRequestEnd>
      <!--
				SETUP PAGE NOT FOUND RESOLVED IN WILDCARD CONTEXT
        
        When working with wildcard items.
        
        The GetItem() method in the Sitecore.Mvc.Presentation.PageContext class in Sitecore.MVC.dll runs the mvc.getPageItem pipeline, which has a number of processors defined. One of those is Sitecore.Mvc.Pipelines.Response.GetPageItem.GetFromRouteUrl which resolves the Item (again) from the Route URL.
				When the pipeline returns, a number of checks are made, one of which is to check if the Context.Item.ID matches the Item returned, if not it sets Context.Item to the one resolved by the mvc.getPageItem pipeline.
        -->
      <mvc.getPageItem>
        <processor type="Constellation.Foundation.PageNotFound.Pipelines.Mvc.CheckItemResolved, Constellation.Foundation.PageNotFound"
                    patch:before="*[@type='Sitecore.Mvc.Pipelines.Response.GetPageItem.GetFromRouteUrl, Sitecore.Mvc']" />
      </mvc.getPageItem>
		</pipelines>
	</sitecore>
</configuration>